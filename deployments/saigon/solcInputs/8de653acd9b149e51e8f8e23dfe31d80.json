{
  "language": "Solidity",
  "sources": {
    "contracts/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ncontract Proxy {\n    bytes32 private constant IMPLEMENTATION_SLOT =\n        bytes32(uint(keccak256(\"eip1967.proxy.implementation\")) - 1);\n    bytes32 private constant ADMIN_SLOT =\n        bytes32(uint(keccak256(\"eip1967.proxy.admin\")) - 1);\n\n    constructor() {\n        _setAdmin(msg.sender);\n    }\n\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    function _getAdmin() private view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    function _setAdmin(address _admin) private {\n        require(_admin != address(0), \"admin = zero address\");\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = _admin;\n    }\n\n    function _getImplementation() private view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    function _setImplementation(address _implementation) private {\n        require(_implementation.code.length > 0, \"implementation is not contract\");\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = _implementation;\n    }\n\n    // Admin interface //\n    function changeAdmin(address _admin) external ifAdmin {\n        _setAdmin(_admin);\n    }\n\n    // 0x3659cfe6\n    function upgradeTo(address _implementation) external ifAdmin {\n        _setImplementation(_implementation);\n    }\n\n    // 0xf851a440\n    function admin() external view returns (address) {\n        return _getAdmin();\n    }\n\n    // 0x5c60da1b\n    function implementation() external view returns (address) {\n        return _getImplementation();\n    }\n\n    // User interface //\n    function _delegate(address _implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n\n            // calldatacopy(t, f, s) - copy s bytes from calldata at position f to mem at position t\n            // calldatasize() - size of call data in bytes\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n\n            // delegatecall(g, a, in, insize, out, outsize) -\n            // - call contract at address a\n            // - with input mem[in…(in+insize))\n            // - providing g gas\n            // - and output area mem[out…(out+outsize))\n            // - returning 0 on error (eg. out of gas) and 1 on success\n            let result := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            // returndatacopy(t, f, s) - copy s bytes from returndata at position f to mem at position t\n            // returndatasize() - size of the last returndata\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                // revert(p, s) - end execution, revert state changes, return data mem[p…(p+s))\n                revert(0, returndatasize())\n            }\n            default {\n                // return(p, s) - end execution, return data mem[p…(p+s))\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    function _fallback() private {\n        _delegate(_getImplementation());\n    }\n\n    fallback() external payable {\n        _fallback();\n    }\n\n    receive() external payable {\n        _fallback();\n    }\n}\n\n\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    function getAddressSlot(\n        bytes32 slot\n    ) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}